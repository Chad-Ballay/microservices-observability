version: '2.1'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper:/var/lib/zookeeper
    networks:
      - reactnet

  kafka:
    image: confluentinc/cp-kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka:/var/lib/kafka
    networks:
      - reactnet
    links:
      - zookeeper
    depends_on:
      - zookeeper

  ksql-server:
    image: xmlking/ksql
    ports:
      - 9098:9098
    networks:
      - reactnet
    links:
      - kafka
    depends_on:
      - kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j.properties"
      STREAMS_BOOTSTRAP_SERVERS: kafka:9092
    entrypoint: 'ksql-server-start'

  cassandra:
    image: cassandra:latest
    networks:
      - reactnet
    volumes:
      - cassandra:/var/lib/cassandra
#      - ${PWD}/infra/cassandra/data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./infra/alertmanager/config:/etc/alertmanager/
      - alertmanager:/alertmanager
    environment:
      GMAIL_ACCOUNT: "abcd@gmail.com"
      GMAIL_AUTH_TOKEN: "abcd"
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'
    networks:
      - reactnet

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./infra/prometheus/config:/etc/prometheus/
      - prometheus:/prometheus
    command:
      - '-config.file=/etc/prometheus/prometheus.yml'
      - '-storage.local.path=/prometheus'
      - '-alertmanager.url=http://alertmanager:9093'
    networks:
      - reactnet
    links:
      - app
      - alertmanager
    depends_on:
      - app
      - alertmanager

  influxdb:
    image: influxdb:1.2.4-alpine
    ports:
      - 8083:8083
    environment:
      - INFLUXDB_ADMIN_ENABLED=true
    networks:
      - reactnet
    volumes:
      - influxdb:/var/lib/influxdb
#      - ./infra/influxdb/data:/var/lib/influxdb
#      - ./infra/influxdb/conf/influxdb.conf:/etc/influxdb/influxdb.conf

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - reactnet
    volumes:
      - grafana:/var/lib/grafana
    links:
      - influxdb
      - prometheus
    depends_on:
      - influxdb
      - prometheus

  capi:
    image: microservices-observability/cassandra-data-service:0.1.0-SNAPSHOT
    ports:
      - 8081:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - reactnet
    links:
      - cassandra
      - kafka
    depends_on:
      cassandra:
        condition: service_healthy

  stream:
    image: microservices-observability/stream-service:0.1.0-SNAPSHOT
    ports:
      - 8082:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - reactnet
    links:
      - kafka
    depends_on:
      - kafka

  app:
    image: microservices-observability/ui-app:0.1.0-SNAPSHOT
    ports:
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CASSANDRA_API_URL=http://capi:8080
      - STREAM_API_URL=http://stream:8080
    networks:
      - reactnet
    links:
      - kafka
      - capi
      - stream
    depends_on:
      - kafka
      - capi
      - stream

  kafka-influxdb-pump:
    image: microservices-observability/kafka-influxdb-service:0.1.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_BATCH_SIZE=100
    networks:
      - reactnet
    links:
      - kafka
      - influxdb
    depends_on:
      - kafka
      - influxdb


networks:
  reactnet:
    driver: bridge

volumes:
  cassandra:
    driver: local
  zookeeper:
  kafka:
  influxdb:
  grafana:
  prometheus:
  alertmanager:
